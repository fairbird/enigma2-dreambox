<menu key="mainmenu" text="Main menu">
<!--
	The following types are allowed:
	<screen [module="mod"] [screen="classname"]>[arguments]</screen>
		Executes Screen called "classname" from module "Screen.mod".
		If no module is given, Screen must be globally available.
		If no screen is given, module is used as screen class name.
		Arguments must be comma seperated (will be fed to eval), and can
			use stuff from module.
		(Of course you must specify at least one of module, screen.)
	<plugin [extensions/system="pluginname"] [screen="classname"]>[arguments]</plugin>
		Either "extensions" or "system" must be used. "extensions" is for 
		Plugin.Extensions plugins and "system" is for Plugins.SystemPlugins.
	<plugin [extensions="pluginname"] [screen="classname"]>[arguments]</plugin>
		Executes Screen called "classname" from module "Plugins.Extensions.pluginname.plugin".
		If no screen is given, "pluginname" is used as screen class name.
		Arguments must be comma seperated (will be fed to eval), and can
			use stuff from module.
	<setup id="id" />
		Opens a setup with specified id.
	<code> .. code .. </code>
		Python "exec"s code.
-->
		<menu key="timermenu" weight="7" level="0" text="Timers">
			<item key="timer_edit" weight="0" level="0" text="Timers"><screen module="TimerEdit" screen="TimerEditList" /></item>
			<item key="crontimer_edit" weight="10" level="0" text="CronTimers"><screen module="CronTimer" screen="CronTimers" /></item>
		</menu>
		<item key="scart_switch" level="1" text="VCR scart" conditional="config.usage.show_vcr_scart.value" requires="ScartSwitch"><code>self.session.scart.VCRSbChanged(3)</code></item>

		<menu key="information" level="0" text="Information">
			<item key="service_info_screen" level="1" text="Service"><screen module="ServiceInfo" screen="ServiceInfo"/></item>
			<item key="about_screen" level="0" text="About"><screen module="About"/></item>
			<item key="streaming_clients_info_screen" level="2" text="Streaming clients info"><screen module="StreamingClientsInfo"/></item>
		</menu>

		<item key="plugin_selection" level="0" text="Plugins"><screen module="PluginBrowser" screen="PluginBrowser"/></item>
		<menu key="setup" level="0" text="Setup" flushConfigOnClose="1">
			<menu key="scan" weight="7" level="0" text="Tuners &amp; scanning">
				<item key="tuner_setup"  text="Tuner configuration" conditional="nimmanager.nim_slots"><screen module="Satconfig" screen="NimSelection"/></item>
				<item key="auto_scan"  text="Automatic scan" conditional="nimmanager.somethingConnected()"><screen module="ScanSetup" screen="ScanSimple"/></item>
				<item key="manual_scan" text="Manual scan" conditional="nimmanager.somethingConnected()"><screen module="ScanSetup"/></item>
				<item key="fallbacktuner_settings" text="Fallback remote receiver setup"><screen module="SetupFallbacktuner"/></item>
			</menu>
			<menu key="system" weight="5" level="0" text="System">
				<menu key="update" weight="0" level="0" text="Check update Settings">
					<item key="check_update" level="0"><setup id="checkupdate"/></item>
				</menu>
				<menu key="video" level="0" text="Audio &amp; Video">
					<item key="av_setup" level="0"><setup id="avsetup"/></item>
					<item key="subtitle_setup" level="2" text="Subtitle Setup" weight="20"><setup id="subtitlesetup" /></item>
					<item key="autolanguage_setup" level="0" text="Auto Language Setup"><setup id="autolanguagesetup"/></item>
					<item key="osdsetup" level="1" text="OSD Calibration" weight="50" requires="OSDCalibration"><screen module="OSDCalibration" screen="OSDCalibration" /></item>
					<item key="setup_osd3d" level="2" text="OSD 3D Settings" weight="60" requires="OSD3DCalibration"><screen module="OSDCalibration" screen="OSD3DCalibration" /></item>
				</menu>
				<menu key="gui" level="0" text="GUI Settings">
					<item key="language_setup" level="0" text="Language"><screen module="LanguageSelection"/></item>
					<!-- Menu / Setup / Time -->
					<item key="time_setup" level="0" text="Time" weight="50"><screen module="Time" screen="Time" /></item>
					<item key="user_interface" level="0" text="User Interface" ><setup id="userinterface"/></item>
					<item key="usage_setup" level="0" text="Customize"><setup id="usage"/></item>
					<item key="primary_skin_selector" level="0" text="Skin"><screen module="SkinSelector" screen="SkinSelector"/></item>
					<menu key="lcd" level="0" text="Front Panel Display">
						<item key="display_skin_selector" level="0" text="Skin Setup" weight="5" requires="Display"><screen module="SkinSelector" screen="LcdSkinSelector" /></item>
						<item key="lcd_setup" level="1" text="LCD Setup" weight="10" requires="Display"><setup id="FrontDisplay" /></item>
						<item key="led_setup" level="1" text="LED Setup" weight="15"><setup id="LedDisplay" /></item>
					</menu>
				</menu>
				<menu key="logs_menu" level="0" text="Log Manager" weight="2">
					<item key="logs_setup" level="2" text="Settings"><setup id="Logs" /></item>
					<item key="logs_man" level="2" text="View Log Manager"><screen module="LogManager" screen="LogManager" /></item>
				</menu>
				<!-- Menu / Setup / EPG -->
				<menu key="epg" level="0" text="EPG" weight="15">
					<item key="epg_setup" level="0" text="EPG Setup" weight="5"><setup id="EPG" /></item>
					<menu key="epgloadsave_menu" level="2" text="Save, Load &amp; Delete EPG Cache" weight="10">
						<item key="saveepgcache" level="0" text="Save EPG Cache">
							<code>
from Components.EpgLoadSave import EpgSaveMsg
def msgClosed(ret):
	if ret:
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.save()
self.session.openWithCallback(msgClosed, EpgSaveMsg)
							</code>
						</item>
						<item key="loadepgcache" level="0" text="Load EPG Cache">
							<code>
from Components.EpgLoadSave import EpgLoadMsg
def msgClosed(ret):
	if ret:
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.load()
self.session.openWithCallback(msgClosed, EpgLoadMsg)
							</code>
						</item>
						<item key="deleteepgcache" level="0" text="Delete EPG Cache">
							<code>
from Components.EpgLoadSave import EpgDeleteMsg
def msgClosed(ret):
	if ret:
		import os
		from Components.config import config
		if os.path.exists(config.misc.epgcache_filename.value):
			os.remove(config.misc.epgcache_filename.value)
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.flushEPG()
self.session.openWithCallback(msgClosed, EpgDeleteMsg)
							</code>
						</item>
					</menu>
				</menu>
				<item key="rfmod_setup" level="1" requires="RfModulator"><setup id="RFmod"/></item>
				<menu key="expert" level="0" text="Expert settings">
					<item key="accesslevel_setup" level="0" text="User Mode"><setup id="accesslevel"/></item>
					<!-- Menu / Setup / Recordings, Playback & Timeshift -->
					<menu key="rec" level="1" text="Playback, Recording &amp; Timeshift" weight="45">
						<item key="playback_setup" level="0" text="Playback Setup" weight="5"><setup id="Playback" /></item>
						<item key="recording_setup" level="0" text="Recording Setup" weight="10"><screen module="Recording" screen="RecordingSettings" /></item>
						<item key="timeshift_setup" level="0" text="Timeshift Setup" weight="15"><screen module="Timeshift" screen="TimeshiftSettings" /></item>
						<item key="hdmirecord_setup" level="0" text="HDMI-IN Recording settings" weight="15" requires="HDMIin"><setup id="HDMIRecord"/></item>
					</menu>
					<menu key="harddisk" level="0" text="Harddisk" requires="Harddisk">
						<item key="harddisk_setup" level="0"><setup id="harddisk"/></item>
						<item key="harddisk_init" level="0" text="Initialization"><screen module="HarddiskSetup" screen="HarddiskSelection"/></item>
						<item key="harddisk_check" level="0" text="Filesystem check"><screen module="HarddiskSetup" screen="HarddiskFsckSelection"/></item>
						<item key="flash_expander" level="2" text="Flash Expander" weight="40"><screen module="FlashExpander" screen="FlashExpander" /></item>
					</menu>
					<item key="network_setup" level="0" text="Network"><screen module="NetworkSetup" screen="NetworkAdapterSelection"/></item>
					<item key="input_device_setup" level="1" text="Input devices"><screen module="InputDeviceSetup" screen="InputDeviceSelection"/></item>
					<item key="keyboard_setup" text="Keyboard"><setup id="keyboard"/></item>
					<item key="hotkey_setup" level="1" text="Hotkey"><screen module="Hotkey" screen="HotkeySetup"/></item>
				</menu>
			</menu>

			<menu key="cam" weight="10" text="SoftCam / CI">
				<item key="softcam_setup" weight="10" level="0" text="Softcam Setup"><screen module="SoftcamSetup" screen="SoftcamSetup"/></item>
				<item key="ci_setup" weight="10" level="0" text="Common Interface" requires="CommonInterface"><screen module="Ci" screen="CiSelection"/></item>
				<item key="streamrelay_settings" weight="110" level="2" text="Stream Relay Settings"><screen module="SoftcamSetup" screen="StreamRelaySetup" /></item>
			</menu>

			<item key="parental_setup" weight="15" level="0" text="Parental control"><screen module="ParentalControlSetup" screen="ParentalControlSetup"/></item>
			<item key="factory_reset" weight="15" level="0" text="Factory reset"><screen module="FactoryReset" screen="FactoryReset"/></item>
			<!--item key="flash_online" level="0" text="Flash image Online" description="Download and flash images on your device." weight="13"><screen module="FlashManager" screen="FlashManager" /></item-->
			<!--item key="software_update" weight="15" level="0" text="Software update"><screen module="SoftwareUpdate" screen="UpdatePlugin"/></item-->
		</menu>

		<menu key="shutdown" text="Standby / restart">
			<item key="sleep" text="Sleep timer"><screen module="SleepTimerEdit" screen="SleepTimerEdit"/></item>
			<item key="standby" text="Standby"><screen module="Standby" screen="Standby"/></item>
			<item key="restart" text="Full Restart"><screen module="Standby" screen="TryQuitMainloop">2</screen></item>
			<item key="dualboot" weight="24" level="0" text="Switch to Android" requires="canDualBoot"><screen module="Standby" screen="SwitchToAndroid" /></item>
			<!--item key="restart_enigma_debug" text="Restart enigma" requires="InDebugMode"><screen module="Standby" screen="TryQuitMainloop">6</screen></item>
			<item key="restart_enigma" text="Restart enigma" requires="!InDebugMode"><screen module="Standby" screen="TryQuitMainloop">3</screen></item-->
			<item key="restart_enigma" text="Restart enigma"><screen module="Standby" screen="TryQuitMainloop">3</screen></item>
			<!--item key="restart_enigma" text="Restart enigma in standard mode" requires="InDebugMode"><screen module="Standby" screen="TryQuitMainloop">3</screen></item>
			<item key="restart_enigma_debug" text="Restart enigma in debug mode" requires="!InDebugMode"><screen module="Standby" screen="TryQuitMainloop">6</screen></item-->
			<item key="multiboot" level="0" text="MultiBoot Manager" weight="6" requires="canMultiBoot"><screen module="MultiBootManager" screen="MultiBootManager" /></item>
			<item key="kexec_multiboot" level="2" text="Enable Kexec MultiBoot" weight="6" requires="cankexec"><screen module="MultiBootManager" screen="KexecInit">1</screen></item>
			<item key="deep_standby" text="Deep standby" requires="DeepstandbySupport"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
			<item key="deep_standby" text="Shutdown" requires="!DeepstandbySupport"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
			<item key="maintenance_mode" level="0" text="Recovery Mode" weight="55" requires="RecoveryMode"><screen module="Standby" screen="TryQuitMainloop">16</screen></item>
		</menu>
</menu>
