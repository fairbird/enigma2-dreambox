Skip to content
Search or jump toâ€¦
Pull requests
Issues
Codespaces
name: Enigma2 CI

on:
  push:
    branches: [ workflows, develop ]
  pull_request:
    branches: [ workflows, develop ]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        gcc: [11]
        python: ['3.10']
    steps:
    - uses: actions/checkout@v2
    - name: install gcc ${{ matrix.gcc }}
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get -q update
        sudo apt install g++-${{ matrix.gcc }}
    - name: install python packages
      run: |
        pip3 install netifaces pyopenssl python-wifi service_identity twisted
    - name: install dev packages
      run: |
        sudo apt-get -q update
        sudo apt-get install linux-libc-dev
        sudo apt-get install git
        sudo apt-get install build-essential
        sudo apt-get install automake
        sudo apt-get install libtool
        sudo apt-get install python3-dev
        sudo apt-get install zlib1g-dev
        sudo apt-get install gettext
        sudo apt-get install swig
        sudo apt-get install libgstreamer1.0-dev
        sudo apt-get install libgstreamer-plugins-base1.0-dev
        sudo apt-get install libfreetype6-dev
        sudo apt-get install libfribidi-dev
        sudo apt-get install libssl-dev
        sudo apt-get install libavahi-client-dev
        sudo apt-get install libjpeg-turbo8-dev
        sudo apt-get install libgif-dev
        sudo apt-get install mm-common
    - name: build enigma2 dependencies
      env: 
        CC: "gcc-${{ matrix.gcc }}"
        CXX: "g++-${{ matrix.gcc }}"
      run: |
        echo installing libdvbsi++
        pushd .
        cd /tmp
        git clone --depth 1 git://git.opendreambox.org/git/obi/libdvbsi++.git
        cd libdvbsi++
        autoreconf -i
        ./configure
        make
        sudo make install
        popd
        echo installing tuxbox
        pushd .
        cd /tmp
        git clone --depth 1 https://github.com/OpenPLi/tuxtxt.git
        cd tuxtxt/libtuxtxt
        autoreconf -i
        ./configure --with-boxtype=generic DVB_API_VERSION=5
        make
        sudo make install
        cd ../tuxtxt
        autoreconf -i
        ./configure --with-boxtype=generic DVB_API_VERSION=5
        make
        sudo make install
        popd
        echo "installing libsigc++-3"
        pushd .
        cd /tmp
        git clone --depth 1 https://github.com/dbus-cxx/libsigc--3.0.git
        cd libsigc--3.0
        autoreconf -i
        ./configure
        make
        sudo make install
        popd
    - name: patch enigma cpp files
      run: |
        sed -i 's/eFatal/eDebug/g' lib/gdi/gfbdc.cpp
    - name: build enigma2
      env: 
        CC: "gcc-${{ matrix.gcc }}"
        CXX: "g++-${{ matrix.gcc }}"
      run: |
        echo compiling enigma2
        autoreconf -i
        ./configure --with-libsdl=no --with-boxtype=nobox --enable-dependency-tracking ac_cv_prog_c_openmp=-fopenmp --with-textlcd
        make
        python3 -m compileall .
    - name: patch enigma py files
      run: |
        sed -i 's/reloadWindowStyles()  #/# reloadWindowStyles()  #/g' lib/python/skin.py
        sed -i 's/setResolution(xres, yres/setResolution(xres, yres, 8/g' lib/python/skin.py
        sed -i '1 i\globals()["__builtins__"]["ngettext"] = ngettext' lib/python/Tools/Profile.py
        sed -i '1 i\from gettext import ngettext' lib/python/Tools/Profile.py
        sed -i 's/reactor.run/pass  # reactor.run/g' lib/python/StartEnigma.py
        sed -i 's/enigma.quitMainloop(5)/enigma.quitMainloop(1)/' lib/python/StartEnigma.py
        sed -i 's/import enigma/import enigma\nenigma.quitMainloop(1)/' lib/python/StartEnigma.py
        echo 'enigma.quitMainloop(0)' >> lib/python/StartEnigma.py
    - name: install enigma
      run: |
        sudo make install
        sudo mkdir -p '/usr/local/etc/enigma2'
        sudo sh -c "echo 'config.misc.do_overscanwizard=false' > /usr/local/etc/enigma2/settings"
        sudo sh -c "echo 'config.misc.firstrun=false' >> /usr/local/etc/enigma2/settings"
        sudo sh -c "echo 'config.misc.initialchannelselection=false' >> /usr/local/etc/enigma2/settings"
        sudo sh -c "echo 'config.misc.languageselected=false' >> /usr/local/etc/enigma2/settings"
        sudo sh -c "echo 'config.misc.videowizardenabled=false' >> /usr/local/etc/enigma2/settings"
    - name: start enigma2
      run: |
        sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib ENIGMA_DEBUG_LVL=5 enigma2
        echo done!
